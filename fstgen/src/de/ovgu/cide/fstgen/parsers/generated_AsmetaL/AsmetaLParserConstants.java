/* Generated By:JavaCC: Do not edit this line. AsmetaLParserConstants.java */
package de.ovgu.cide.fstgen.parsers.generated_AsmetaL;

public interface AsmetaLParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 9;
  int FORMAL_COMMENT = 10;
  int MULTI_LINE_COMMENT = 11;
  int ASM = 13;
  int MODULE = 14;
  int ASYNCR = 15;
  int IMPORT = 16;
  int EXPORT = 17;
  int SIGNATURE = 18;
  int INIT = 19;
  int Default = 20;
  int AGENT = 21;
  int INVARIANT = 22;
  int CTLSpec = 23;
  int NAME = 24;
  int LTLSpec = 25;
  int JUSTICE = 26;
  int FAIRNESS = 27;
  int COMPASSION = 28;
  int INVAR = 29;
  int OVER = 30;
  int DEFINITIONS = 31;
  int FUNCTION = 32;
  int STATIC = 33;
  int DYNAMIC = 34;
  int DERIVED = 35;
  int MONITORED = 36;
  int CONTROLLED = 37;
  int SHARED = 38;
  int OUT = 39;
  int DOMAIN = 40;
  int ANYDOMAIN = 41;
  int BASIC = 42;
  int ABSTRACT = 43;
  int ENUM = 44;
  int SUBSETOF = 45;
  int PROD = 46;
  int SEQ = 47;
  int POWERSET = 48;
  int BAG = 49;
  int MAP = 50;
  int RULEDOM = 51;
  int TRUE = 52;
  int FALSE = 53;
  int UNDEF = 54;
  int IM_PART = 55;
  int IF = 56;
  int THEN = 57;
  int ELSE = 58;
  int ENDIF = 59;
  int SWITCH = 60;
  int END_SWITCH = 61;
  int CASE = 62;
  int OTHERWISE = 63;
  int ENDCASE = 64;
  int LET = 65;
  int ENDLET = 66;
  int EXIST = 67;
  int UNIQUE = 68;
  int WITH = 69;
  int FORALL = 70;
  int Skip = 71;
  int RULE = 72;
  int MACRO = 73;
  int TURBO = 74;
  int MAIN = 75;
  int PAR = 76;
  int ENDPAR = 77;
  int CHOOSE = 78;
  int DO = 79;
  int IFNONE = 80;
  int EXTEND = 81;
  int seq = 82;
  int ENDSEQ = 83;
  int ITERATE = 84;
  int ENDITERATE = 85;
  int LOCAL = 86;
  int TRY = 87;
  int CATCH = 88;
  int WHILE = 89;
  int WHILEREC = 90;
  int IN = 91;
  int EQ = 92;
  int LT = 93;
  int LE = 94;
  int GT = 95;
  int GE = 96;
  int NEQ = 97;
  int PLUS = 98;
  int MINUS = 99;
  int MULT = 100;
  int DIV = 101;
  int PWR = 102;
  int NOTIN = 103;
  int IFF = 104;
  int AND = 105;
  int NOT = 106;
  int OR = 107;
  int XOR = 108;
  int IMPLIES = 109;
  int MOD = 110;
  int ORIGINAL = 111;
  int NUMBER = 112;
  int NATNUMBER = 113;
  int REAL_NUMBER = 114;
  int COMPLEX_NUMBER = 115;
  int ID_VARIABLE = 116;
  int ID_ENUM = 117;
  int ID_DOMAIN = 118;
  int ID_RULE = 119;
  int ID_AXIOM = 120;
  int ID_CTL = 121;
  int ID_LTL = 122;
  int ID_FUNCTION = 123;
  int LETTER = 124;
  int DIGIT = 125;
  int CHAR_LITERAL = 126;
  int STRING_LITERAL = 127;
  int ID = 128;
  int MOD_ID = 129;

  int DEFAULT = 0;
  int GENERIC_ID = 1;
  int MODULE_ID = 2;
  int IN_SINGLE_LINE_COMMENT = 3;
  int IN_FORMAL_COMMENT = 4;
  int IN_MULTI_LINE_COMMENT = 5;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"asm\"",
    "\"module\"",
    "\"asyncr\"",
    "\"import\"",
    "\"export\"",
    "\"signature\"",
    "\"init\"",
    "\"default\"",
    "\"agent\"",
    "\"invariant\"",
    "\"CTLSPEC\"",
    "\"NAME\"",
    "\"LTLSPEC\"",
    "\"JUSTICE\"",
    "\"FAIRNESS\"",
    "\"COMPASSION\"",
    "\"INVAR\"",
    "\"over\"",
    "\"definitions\"",
    "\"function\"",
    "\"static\"",
    "\"dynamic\"",
    "\"derived\"",
    "\"monitored\"",
    "\"controlled\"",
    "\"shared\"",
    "\"out\"",
    "\"domain\"",
    "\"anydomain\"",
    "\"basic\"",
    "\"abstract\"",
    "\"enum\"",
    "\"subsetof\"",
    "\"Prod\"",
    "\"Seq\"",
    "\"Powerset\"",
    "\"Bag\"",
    "\"Map\"",
    "\"Rule\"",
    "\"true\"",
    "\"false\"",
    "\"undef\"",
    "\"i\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"endif\"",
    "\"switch\"",
    "\"endswitch\"",
    "\"case\"",
    "\"otherwise\"",
    "\"endcase\"",
    "\"let\"",
    "\"endlet\"",
    "\"exist\"",
    "\"unique\"",
    "\"with\"",
    "\"forall\"",
    "\"skip\"",
    "\"rule\"",
    "\"macro\"",
    "\"turbo\"",
    "\"main\"",
    "\"par\"",
    "\"endpar\"",
    "\"choose\"",
    "\"do\"",
    "\"ifnone\"",
    "\"extend\"",
    "\"seq\"",
    "\"endseq\"",
    "\"iterate\"",
    "\"enditerate\"",
    "\"local\"",
    "\"try\"",
    "\"catch\"",
    "\"while\"",
    "\"whilerec\"",
    "\"in\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"notin\"",
    "\"iff\"",
    "\"and\"",
    "\"not\"",
    "\"or\"",
    "\"xor\"",
    "\"implies\"",
    "\"mod\"",
    "\"@original\"",
    "<NUMBER>",
    "<NATNUMBER>",
    "<REAL_NUMBER>",
    "<COMPLEX_NUMBER>",
    "<ID_VARIABLE>",
    "<ID_ENUM>",
    "<ID_DOMAIN>",
    "<ID_RULE>",
    "<ID_AXIOM>",
    "<ID_CTL>",
    "<ID_LTL>",
    "<ID_FUNCTION>",
    "<LETTER>",
    "<DIGIT>",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<ID>",
    "<MOD_ID>",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\":\"",
    "\"{\"",
    "\"|\"",
    "\"}\"",
    "\"->\"",
    "\".\"",
    "\"..\"",
    "\"[\"",
    "\"]\"",
    "\"<<\"",
    "\">>\"",
    "\"#\"",
    "\":=\"",
    "\"<-\"",
  };

}
